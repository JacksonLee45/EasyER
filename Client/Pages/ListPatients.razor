@page "/ListPatients"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using EasyER.Shared
@using EasyER.Server.Models


@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Patient Information</PageTitle>

<h1>Patient Information</h1>

@if (patients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Trauma Level</th>
                <th>Injury Name</th>
                <th>Time Admitted</th>
                <th>Admitted By</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patient in patients)
            {
                <tr>
                    <td>@patient.FirstName</td>
                    <td>@patient.LastName</td>
                    <td>@patient.TraumaLevel</td>
                    <td>@patient.InjuryName</td>
                    <td>@patient.TimeAdmitted</td>
                    <td>@patient.NurseId</td>
                    <AuthorizeView Roles="Nurse">
                    <td><NavLink class="btn btn-outline-warning" href=@("update-patient/"+patient.PatientId)>Edit</NavLink></td>
                    </AuthorizeView>
                    <AuthorizeView Roles="Admin">
                        <td>
                            <button
                                class="btn btn-outline-danger"
                                @onclick="@( ()=>DeactivatePatient(patient.PatientId) )"
                            >Set InActive</button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private Patient[]? patients;
    private ApplicationUser[]? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            patients = await Http.GetFromJsonAsync<Patient[]>("Patient/all");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeactivatePatient(int patientId)
    {
        try
        {
            var response = await Http.DeleteAsync("Patient/delete/" + patientId);
            NavManager.NavigateTo("/ListPatients", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
